var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  inject: () => inject,
  name: () => name,
  usage: () => usage
});
module.exports = __toCommonJS(src_exports);
var import_fs2 = require("fs");
var import_path2 = require("path");
var import_archiver2 = __toESM(require("archiver"));

// src/api.ts
var AsmrApi = class {
  constructor(ctx, config) {
    this.ctx = ctx;
    this.config = config;
  }
  static {
    __name(this, "AsmrApi");
  }
  requestOptions = {
    headers: { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0" }
  };
  async search(keyword, page) {
    const keywordForApi = keyword.replace(/\//g, "%20");
    const url = `${this.config.apiBaseUrl}/search/${keywordForApi}?order=dl_count&sort=desc&page=${page}&pageSize=${this.config.pageSize}&subtitle=0&includeTranslationWorks=true`;
    return this.ctx.http.get(url, this.requestOptions);
  }
  async getPopular(page) {
    const payload = {
      keyword: " ",
      page,
      pageSize: this.config.pageSize,
      subtitle: 0,
      localSubtitledWorks: [],
      withPlaylistStatus: []
    };
    return this.ctx.http.post(`${this.config.apiBaseUrl}/recommender/popular`, payload, this.requestOptions);
  }
  async getWorkInfo(rid) {
    return this.ctx.http.get(`${this.config.apiBaseUrl}/workInfo/${rid}`, this.requestOptions);
  }
  async getTracks(rid) {
    return this.ctx.http.get(`${this.config.apiBaseUrl}/tracks/${rid}`, this.requestOptions);
  }
  async downloadImageAsDataUri(url) {
    try {
      const buffer = await this.ctx.http.get(url, { ...this.requestOptions, responseType: "arraybuffer", timeout: 15e3 });
      const base64 = Buffer.from(buffer).toString("base64");
      const mime = url.includes(".png") ? "image/png" : "image/jpeg";
      return `data:${mime};base64,${base64}`;
    } catch (error) {
      this.ctx.logger("asmrone").warn("‰∏ãËΩΩÂ∞ÅÈù¢ÂõæÁâáÂ§±Ë¥• %s: %o", url, error);
      return null;
    }
  }
};

// src/renderer.ts
var import_koishi = require("koishi");

// src/utils.ts
function formatRjCode(rjInput) {
  if (!rjInput) return null;
  const numericPart = rjInput.replace(/^RJ/i, "");
  if (!/^\d+$/.test(numericPart)) {
    return null;
  }
  return "RJ" + numericPart.padStart(8, "0");
}
__name(formatRjCode, "formatRjCode");
function formatWorkDuration(seconds) {
  if (isNaN(seconds) || seconds < 0) return "Êú™Áü•";
  const h4 = Math.floor(seconds / 3600);
  const m = Math.floor(seconds % 3600 / 60);
  const s = Math.round(seconds % 60);
  let result = "";
  if (h4 > 0) result += `${h4}Â∞èÊó∂`;
  if (m > 0 || h4 > 0) result += `${m}ÂàÜ`;
  result += `${s}Áßí`;
  return result;
}
__name(formatWorkDuration, "formatWorkDuration");
function formatTrackDuration(seconds) {
  if (isNaN(seconds) || seconds < 0) return "";
  const h4 = Math.floor(seconds / 3600);
  const m = Math.floor(seconds % 3600 / 60);
  const s = Math.round(seconds % 60);
  const pad = /* @__PURE__ */ __name((n) => n.toString().padStart(2, "0"), "pad");
  if (h4 > 0) return `${h4}:${pad(m)}:${pad(s)}`;
  return `${pad(m)}:${pad(s)}`;
}
__name(formatTrackDuration, "formatTrackDuration");
function formatTrackSize(bytes) {
  if (isNaN(bytes) || bytes <= 0) return "";
  const mb = bytes / (1024 * 1024);
  return `${mb.toFixed(2)} MB`;
}
__name(formatTrackSize, "formatTrackSize");
function flattenTracks(items) {
  const tracks = [];
  function processItem(item) {
    if (item.type === "audio" && item.mediaDownloadUrl) {
      tracks.push({ title: item.title, url: item.mediaDownloadUrl, duration: item.duration, size: item.size });
    } else if (item.type === "folder" && item.children) {
      item.children.forEach(processItem);
    }
  }
  __name(processItem, "processItem");
  items.forEach(processItem);
  return tracks;
}
__name(flattenTracks, "flattenTracks");
var getSafeFilename = /* @__PURE__ */ __name((name2, ext = "") => name2.replace(/[\/\\?%*:|"<>]/g, "_") + ext, "getSafeFilename");
var getZipFilename = /* @__PURE__ */ __name((baseName) => `${baseName.replace(/[\/\\?%*:|"<>]/g, "_")}.zip`, "getZipFilename");

// src/renderer.ts
var Renderer = class {
  constructor(ctx) {
    this.ctx = ctx;
    this.logger = ctx.logger("asmrone");
  }
  static {
    __name(this, "Renderer");
  }
  logger;
  async renderHtmlToImage(html) {
    if (!this.ctx.puppeteer) return null;
    let page;
    try {
      page = await this.ctx.puppeteer.page();
      await page.setViewport({ width: 840, height: 600, deviceScaleFactor: 2 });
      await page.setContent(html, { waitUntil: "networkidle0" });
      const imageBuffer = await page.screenshot({ fullPage: true, type: "png" });
      return imageBuffer;
    } catch (error) {
      this.logger.error("Puppeteer Ê∏≤ÊüìÂ§±Ë¥•: %o", error);
      return null;
    } finally {
      if (page) await page.close();
    }
  }
  getMenuStyle() {
    return `
      :root { --bg-color: #1e1e1e; --item-bg-color: #252526; --text-color: #e0e0e0; --text-light-color: #d0d0d0; --title-color: #9cdcfe; --accent-color: #4ec9b0; --highlight-color: #c586c0; --tag-bg-color: #3c3c3c; --tag-text-color: #d0d0d0; }
      body { background-color: var(--bg-color); color: var(--text-color); font-family: 'Segoe UI', 'Microsoft YaHei', sans-serif; margin: 0; padding: 20px; }
      .container { max-width: 800px; margin: auto; }
      .header { color: var(--accent-color); font-size: 24px; margin-bottom: 20px; text-align: center; }
    `;
  }
  createSearchHtml(works, keyword, pageNum, total, config) {
    const worksHtml = works.map((work, index) => {
      const rjCode = `RJ${String(work.id).padStart(8, "0")}`;
      const cvs = work.vas.map((v) => import_koishi.h.escape(v.name)).join(", ") || "Êú™Áü•";
      const tags = work.tags.slice(0, 20).map((t) => `<span class="tag">${import_koishi.h.escape(t.name)}</span>`).join("");
      const duration = formatWorkDuration(work.duration);
      return `
          <div class="work-item">
            <div class="index">${(pageNum - 1) * config.pageSize + index + 1}</div>
            <div class="cover-container"><img src="${work.mainCoverUrl}" class="cover" /></div>
            <div class="info">
              <div class="title">„Äê${rjCode}„Äë${import_koishi.h.escape(work.title)}</div>
              <div class="details">
                <span><i class="icon">Á§æÂõ¢Ôºöüè¢</i>${import_koishi.h.escape(work.name)}</span><span><i class="icon">Â£∞‰ºòÔºöüé§</i>${cvs}</span>
                <span><i class="icon">ËØÑÂàÜÔºö‚≠êÔ∏è</i>${work.rate_average_2dp} (${work.rate_count})</span><span><i class="icon">ÈîÄÈáèÔºöüì•</i>${work.dl_count}</span>
                <span><i class="icon">Êó•ÊúüÔºöüìÖ</i>${work.release}</span><span><i class="icon">Êó∂ÈïøÔºö‚è±Ô∏è</i>${duration}</span>
              </div>
              <div class="tags">${tags}</div>
            </div>
          </div>`;
    }).join("");
    return `<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><style>
        ${this.getMenuStyle()}
        .work-item { display: flex; align-items: center; background-color: var(--item-bg-color); border-radius: 8px; padding: 15px; margin-bottom: 15px; border-left: 4px solid var(--accent-color); }
        .index { font-size: 28px; font-weight: bold; color: var(--highlight-color); margin-right: 15px; align-self: center; }
        .cover-container { width: 160px; aspect-ratio: 560 / 420; border-radius: 6px; overflow: hidden; flex-shrink: 0; margin-right: 15px; }
        .cover { width: 100%; height: 100%; object-fit: cover; }
        .info { display: flex; flex-direction: column; flex-grow: 1; min-width: 0; }
        .title { font-size: 18px; font-weight: bold; color: var(--title-color); margin-bottom: 8px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .details { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 6px 15px; font-size: 14px; color: var(--text-light-color); margin-bottom: 8px; }
        .details span { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; } .icon { font-style: normal; margin-right: 5px; }
        .tags { display: flex; flex-wrap: wrap; gap: 6px; margin-top: auto; }
        .tag { background-color: var(--tag-bg-color); color: var(--tag-text-color); padding: 3px 8px; border-radius: 4px; font-size: 12px; }
      </style></head><body>
        <div class="container">
          <div class="header">‚Äú${import_koishi.h.escape(keyword)}‚ÄùÁöÑÊêúÁ¥¢ÁªìÊûú (Á¨¨ ${pageNum} È°µ / ÂÖ± ${total} ‰∏™)</div>
          ${worksHtml}
        </div></body></html>`;
  }
  createWorkInfoHtml(workInfo, tracks, linksHtml) {
    const rjCode = `RJ${String(workInfo.id).padStart(8, "0")}`;
    const cvs = workInfo.vas.map((v) => import_koishi.h.escape(v.name)).join(", ") || "Êú™Áü•";
    const tags = workInfo.tags.map((t) => `<span class="tag">${import_koishi.h.escape(t.name)}</span>`).join("");
    const trackHtml = tracks.map((track, index) => {
      const duration = formatTrackDuration(track.duration);
      const size = formatTrackSize(track.size);
      const meta = [duration, size].filter(Boolean).join(" | ");
      return `<li><div class="track-title"><span class="track-index">${index + 1}.</span><span>${import_koishi.h.escape(track.title)}</span></div><div class="track-meta">${meta}</div></li>`;
    }).join("");
    return `<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><style>
        ${this.getMenuStyle()}
        .work-info-container { max-width: 800px; margin: auto; background-color: var(--item-bg-color); border-radius: 8px; padding: 20px; }
        .title-header { text-align: center; margin-bottom: 20px; } .title { font-size: 24px; font-weight: bold; color: var(--title-color); }
        .work-content { display: flex; gap: 20px; align-items: flex-start; }
        .cover-container { width: 224px; aspect-ratio: 560 / 420; border-radius: 6px; overflow: hidden; flex-shrink: 0; background-size: cover; background-position: center; }
        .info { flex-grow: 1; min-width: 0; }
        .details { display: grid; grid-template-columns: 1fr; gap: 8px; font-size: 14px; color: var(--text-light-color); margin-bottom: 10px; }
        .links { display: grid; grid-template-columns: 1fr; gap: 8px; font-size: 13px; color: var(--text-light-color); margin-top: 10px; word-break: break-all; }
        .links a { color: var(--accent-color); text-decoration: none; }
        .tags { display: flex; flex-wrap: wrap; gap: 6px; margin-top: 10px; }
        .tag { background-color: var(--tag-bg-color); color: var(--tag-text-color); padding: 3px 8px; border-radius: 4px; font-size: 12px; }
        .divider { border: 0; height: 1px; background-color: #444; margin: 20px 0; }
        .track-list h2 { font-size: 20px; color: var(--accent-color); margin-bottom: 10px; }
        .track-list ol { list-style: none; padding-left: 0; margin: 0; color: var(--text-color); font-size: 15px; }
        .track-list li { margin-bottom: 8px; display: flex; align-items: baseline; justify-content: space-between; }
        .track-title { display: flex; align-items: baseline; min-width: 0; }
        .track-title span:last-child { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .track-index { font-weight: bold; color: var(--highlight-color); margin-right: 10px; }
        .track-meta { color: var(--text-light-color); font-size: 13px; flex-shrink: 0; padding-left: 15px; }
      </style></head><body>
        <div class="work-info-container">
          <div class="title-header"><h1 class="title">„Äê${rjCode}„Äë${import_koishi.h.escape(workInfo.title)}</h1></div>
          <div class="work-content">
              <div class="cover-container" style="background-image: url('${workInfo.mainCoverUrl}')"></div>
              <div class="info">
                  <div class="details">
                      <span><strong>Á§æÂõ¢:üè¢</strong> ${import_koishi.h.escape(workInfo.name)}</span><span><strong>Â£∞‰ºò:üé§</strong> ${cvs}</span><span><strong>Êó•Êúü:üìÖ</strong> ${workInfo.release}</span>
                      <span><strong>ËØÑÂàÜ:‚≠êÔ∏è</strong> ${workInfo.rate_average_2dp} (${workInfo.rate_count}‰∫∫)</span><span><strong>ÈîÄÈáè:üì•</strong> ${workInfo.dl_count}</span>
                      <span><strong>Êó∂Èïø:‚è±Ô∏è</strong> ${formatWorkDuration(workInfo.duration)}</span>
                  </div>
                  ${linksHtml}
                  <div class="tags">${tags}</div>
              </div>
          </div>
          <hr class="divider" />
          <div class="track-list"><h2>Èü≥ËΩ®ÂàóË°®</h2><ol>${trackHtml}</ol></div>
        </div></body></html>`;
  }
};

// src/sender.ts
var import_koishi2 = require("koishi");
var import_path = require("path");
var import_fs = require("fs");
var import_url = require("url");
var import_archiver = __toESM(require("archiver"));
var TrackSender = class {
  constructor(ctx, config, tempDir) {
    this.ctx = ctx;
    this.config = config;
    this.tempDir = tempDir;
    this.logger = ctx.logger("asmrone");
  }
  static {
    __name(this, "TrackSender");
  }
  logger;
  requestOptions = {
    headers: { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0" }
  };
  async processAndSendTracks(indices, allTracks, workInfo, session, mode) {
    const validTracks = indices.map((i) => ({ index: i, track: allTracks[i - 1] })).filter((item) => item.track);
    if (validTracks.length === 0) {
      await session.send("Êú™ÊâæÂà∞‰ªª‰ΩïÊúâÊïàÁöÑÈü≥ËΩ®Â∫èÂè∑„ÄÇ");
      return;
    }
    switch (mode) {
      case "card":
        await this._sendAsCard(validTracks, workInfo, session);
        break;
      case "zip":
        await this._sendAsZip(validTracks, workInfo, session);
        break;
      case "file":
        await this._sendAsFile(validTracks, workInfo, session);
        break;
    }
    await session.send("ÊâÄÊúâËØ∑Ê±ÇÁöÑÈü≥ËΩ®Â∑≤Â§ÑÁêÜÂÆåÊØï„ÄÇ");
  }
  async _sendAsCard(validTracks, workInfo, session) {
    if (session.platform !== "onebot") {
      await session.send("Èü≥‰πêÂç°ÁâáÊ®°Âºè (card) ‰ªÖÂú® onebot Âπ≥Âè∞ÂèóÊîØÊåÅÔºåÂ∑≤Ëá™Âä®ÂàáÊç¢‰∏∫ÂèëÈÄÅÊñá‰ª∂„ÄÇ");
      await this._sendAsFile(validTracks, workInfo, session);
      return;
    }
    await session.send(`Ê≠£Âú®‰∏∫ ${validTracks.length} ‰∏™Èü≥ËΩ®ÁîüÊàêÈü≥‰πêÂç°Áâá...`);
    const rjCode = `RJ${String(workInfo.id).padStart(8, "0")}`;
    const asmrOneUrl = `https://asmr.one/work/${rjCode}`;
    for (const { index, track } of validTracks) {
      try {
        await session.bot.internal.sendGroupMsg(session.guildId, [{
          type: "music",
          data: { type: "163", url: workInfo.source_url || asmrOneUrl, audio: track.url, title: track.title, content: workInfo.name, image: workInfo.mainCoverUrl }
        }]);
      } catch (error) {
        this.logger.error("ÂèëÈÄÅÈü≥‰πêÂç°Áâá %s Â§±Ë¥•: %o", index, error);
        await session.send(`ÂèëÈÄÅÈü≥ËΩ® ${index} „Äå${import_koishi2.h.escape(track.title)}„ÄçÁöÑÈü≥‰πêÂç°ÁâáÂ§±Ë¥•„ÄÇ`);
      }
    }
  }
  async _sendAsFile(validTracks, workInfo, session) {
    await session.send(`Â∞ÜÂºÄÂßãÂπ∂Ë°å‰∏ãËΩΩ ${validTracks.length} ‰∏™Èü≥È¢ëÊñá‰ª∂Ôºå‰∏ãËΩΩÂÆåÊàêÂêéÂ∞ÜÈÄê‰∏™ÂèëÈÄÅ...`);
    const downloadPromises = validTracks.map(
      ({ index, track }) => this.ctx.http.get(track.url, { ...this.requestOptions, responseType: "arraybuffer", timeout: this.config.downloadTimeout * 1e3 }).then((buffer) => ({ status: "fulfilled", value: { buffer: Buffer.from(buffer), track }, index })).catch((error) => ({ status: "rejected", reason: error, index, title: track.title }))
    );
    const results = await Promise.allSettled(downloadPromises);
    for (const result of results) {
      let tempFilePath;
      if (result.status === "fulfilled" && result.value.status === "fulfilled") {
        const { buffer, track } = result.value.value;
        if (buffer.byteLength > 100) {
          try {
            tempFilePath = (0, import_path.resolve)(this.tempDir, getSafeFilename(track.title));
            await import_fs.promises.writeFile(tempFilePath, buffer);
            await session.send(`Ê≠£Âú®ÂèëÈÄÅÊñá‰ª∂: „Äå${import_koishi2.h.escape(track.title)}„Äç`);
            await session.send((0, import_koishi2.h)("file", { src: (0, import_url.pathToFileURL)(tempFilePath).href, title: track.title }));
          } catch (error) {
            this.logger.error("ÂèëÈÄÅÈü≥È¢ëÊñá‰ª∂ %s Â§±Ë¥•: %o", result.value.index, error);
            await session.send(`ÂèëÈÄÅÈü≥ËΩ® ${result.value.index} „Äå${import_koishi2.h.escape(track.title)}„ÄçÂ§±Ë¥•„ÄÇ`);
          } finally {
            if (tempFilePath) await import_fs.promises.unlink(tempFilePath).catch((e) => this.logger.warn("Âà†Èô§‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: %s", e));
          }
        } else {
          await session.send(`Èü≥ËΩ® ${result.value.index} ‰∏ãËΩΩÂ§±Ë¥• (Êñá‰ª∂‰∏∫Á©∫)ÔºåÂ∑≤Ë∑≥Ëøá„ÄÇ`);
        }
      } else {
        const reason = result.status === "rejected" ? result.reason : result.value;
        this.logger.error("‰∏ãËΩΩÈü≥ËΩ® %s (%s) Â§±Ë¥•: %o", reason.index, reason.title, reason.reason);
        await session.send(`‰∏ãËΩΩÈü≥ËΩ® ${reason.index} „Äå${import_koishi2.h.escape(reason.title)}„ÄçÂ§±Ë¥•ÔºåÂ∑≤Ë∑≥Ëøá„ÄÇ`);
      }
    }
  }
  async _sendAsZip(validTracks, workInfo, session) {
    if (this.config.zipMode === "single") {
      await this.handleSingleZip(validTracks, workInfo, session);
    } else {
      await this.handleMultipleZips(validTracks, session);
    }
    if (this.config.usePassword && this.config.password) {
      await session.send(`ÊâÄÊúâÂéãÁº©ÂåÖÁöÑÂØÜÁ†ÅÁªü‰∏Ä‰∏∫: ${this.config.password}`);
    }
  }
  async handleSingleZip(validTracks, workInfo, session) {
    await session.send(`Ê≠£Âú®Âπ∂Ë°å‰∏ãËΩΩ ${validTracks.length} ‰∏™Èü≥ËΩ®ÔºåÂáÜÂ§áÂêàÂπ∂ÂéãÁº©...`);
    let tempZipPath;
    try {
      const downloadPromises = validTracks.map(
        ({ index, track }) => this.ctx.http.get(track.url, { ...this.requestOptions, responseType: "arraybuffer", timeout: this.config.downloadTimeout * 1e3 }).then((buffer) => ({ name: getSafeFilename(track.title), data: Buffer.from(buffer) })).catch((error) => {
          this.logger.error("‰∏ãËΩΩÈü≥ËΩ® %s (%s) Â§±Ë¥•: %o", index, track.title, error);
          session.send(`‰∏ãËΩΩÈü≥ËΩ® ${index} „Äå${import_koishi2.h.escape(track.title)}„ÄçÂ§±Ë¥•ÔºåÂ∑≤Ë∑≥Ëøá„ÄÇ`);
          return null;
        })
      );
      const downloadedFiles = (await Promise.all(downloadPromises)).filter((f) => f && f.data.byteLength > 100);
      if (downloadedFiles.length > 0) {
        const zipFilename = getZipFilename(workInfo.title);
        await session.send(`‰∏ãËΩΩÂÆåÊàê ${downloadedFiles.length} ‰∏™Êñá‰ª∂ÔºåÊ≠£Âú®ÂàõÂª∫ÂéãÁº©ÂåÖ „Äå${import_koishi2.h.escape(zipFilename)}„Äç...`);
        tempZipPath = await this.createZipArchive(downloadedFiles, zipFilename);
        await session.send(`ÂéãÁº©ÂåÖÂ∑≤ÂàõÂª∫ÔºåÊ≠£Âú®ÂèëÈÄÅ...`);
        await session.send((0, import_koishi2.h)("file", { src: (0, import_url.pathToFileURL)(tempZipPath).href, title: zipFilename }));
      } else {
        await session.send("ÊâÄÊúâÈü≥ËΩ®Âùá‰∏ãËΩΩÂ§±Ë¥•ÔºåÊó†Ê≥ïÂàõÂª∫ÂéãÁº©ÂåÖ„ÄÇ");
      }
    } catch (error) {
      this.logger.error("ÂàõÂª∫ÊàñÂèëÈÄÅÂêàÂπ∂ÂéãÁº©ÂåÖÂ§±Ë¥•: %o", error);
      await session.send("ÂàõÂª∫ÊàñÂèëÈÄÅÂéãÁº©ÂåÖÂ§±Ë¥•ÔºåËØ¶ÊÉÖËØ∑Ê£ÄÊü•ÂêéÂè∞Êó•Âøó„ÄÇ");
    } finally {
      if (tempZipPath) await import_fs.promises.unlink(tempZipPath).catch((e) => this.logger.warn("Âà†Èô§‰∏¥Êó∂ÂéãÁº©ÂåÖÂ§±Ë¥•: %s", e));
    }
  }
  async handleMultipleZips(validTracks, session) {
    await session.send(`Ê≠£Âú®ÂáÜÂ§áÂçïÁã¨ÂéãÁº©ÔºåÂÖ± ${validTracks.length} ‰∏™Èü≥ËΩ®...`);
    for (const { index, track } of validTracks) {
      let tempZipPath;
      try {
        await session.send(`Ê≠£Âú®Â§ÑÁêÜÈü≥ËΩ® ${index}: „Äå${import_koishi2.h.escape(track.title)}„Äç...`);
        const audioBuffer = await this.ctx.http.get(track.url, { ...this.requestOptions, responseType: "arraybuffer", timeout: this.config.downloadTimeout * 1e3 });
        if (!audioBuffer || audioBuffer.byteLength < 100) throw new Error("Êñá‰ª∂‰∏∫Á©∫ÊàñËøáÂ∞è");
        const zipFilename = getZipFilename(track.title);
        tempZipPath = await this.createZipArchive([{ name: getSafeFilename(track.title), data: Buffer.from(audioBuffer) }], zipFilename);
        await session.send(`ÂéãÁº©ÂåÖ„Äå${import_koishi2.h.escape(zipFilename)}„ÄçÂ∑≤ÂàõÂª∫ÔºåÊ≠£Âú®ÂèëÈÄÅ...`);
        await session.send((0, import_koishi2.h)("file", { src: (0, import_url.pathToFileURL)(tempZipPath).href, title: zipFilename }));
      } catch (error) {
        this.logger.error("ÂàõÂª∫ÊàñÂèëÈÄÅÁã¨Á´ãÂéãÁº©ÂåÖÂ§±Ë¥•: %o", error);
        await session.send(`Â§ÑÁêÜÈü≥ËΩ® ${index} Â§±Ë¥•ÔºåËØ¶ÊÉÖËØ∑Ê£ÄÊü•ÂêéÂè∞Êó•Âøó„ÄÇ`);
      } finally {
        if (tempZipPath) await import_fs.promises.unlink(tempZipPath).catch((e) => this.logger.warn("Âà†Èô§‰∏¥Êó∂ÂéãÁº©ÂåÖÂ§±Ë¥•: %s", e));
      }
    }
  }
  createZipArchive(filesToPack, outputZipName) {
    return new Promise((promiseResolve, promiseReject) => {
      const tempZipPath = (0, import_path.resolve)(this.tempDir, outputZipName);
      const output = (0, import_fs.createWriteStream)(tempZipPath);
      const archive = this.config.usePassword && this.config.password ? import_archiver.default.create("zip-encrypted", { encryptionMethod: "aes256", password: this.config.password }) : (0, import_archiver.default)("zip", { zlib: { level: 9 } });
      output.on("close", () => promiseResolve(tempZipPath));
      archive.on("warning", (err) => this.logger.warn("Archiver warning: %o", err));
      archive.on("error", (err) => promiseReject(err));
      archive.pipe(output);
      filesToPack.forEach((file) => archive.append(file.data, { name: file.name }));
      archive.finalize();
    });
  }
};

// src/commands.ts
var import_koishi3 = require("koishi");
var CommandHandler = class {
  constructor(ctx, config, api, renderer, sender) {
    this.ctx = ctx;
    this.config = config;
    this.api = api;
    this.renderer = renderer;
    this.sender = sender;
    this.logger = ctx.logger("asmrone");
  }
  static {
    __name(this, "CommandHandler");
  }
  logger;
  activeInteractions = /* @__PURE__ */ new Set();
  isAccessAllowed(session) {
    if (session.isDirect) return true;
    if (!session.guildId) return false;
    if (this.config.accessMode === "whitelist") return this.config.whitelist.includes(session.guildId);
    if (this.config.accessMode === "blacklist") return !this.config.blacklist.includes(session.guildId);
    return true;
  }
  isInteractionActive(session) {
    const interactionKey = `${session.platform}:${session.userId}`;
    if (this.activeInteractions.has(interactionKey)) {
      session.send("ÊÇ®ÂΩìÂâçÊúâÂè¶‰∏Ä‰∏™Êìç‰ΩúÊ≠£Âú®ËøõË°å‰∏≠ÔºåËØ∑ÂÖàÂÆåÊàêÊàñÁ≠âÂæÖÂÆÉË∂ÖÊó∂„ÄÇ");
      return true;
    }
    return false;
  }
  // -- Command Implementations --
  async handlePopular(session, page = 1) {
    if (!this.isAccessAllowed(session) || this.isInteractionActive(session)) return;
    const interactionKey = `${session.platform}:${session.userId}`;
    this.activeInteractions.add(interactionKey);
    const fetcher = /* @__PURE__ */ __name((p) => this.api.getPopular(p), "fetcher");
    const onNextPage = /* @__PURE__ */ __name((nextSession, nextPage) => this.handleListInteraction(nextSession, nextPage, fetcher, "ÁÉ≠Èó®Èü≥Â£∞", onNextPage), "onNextPage");
    await this.handleListInteraction(session, page, fetcher, "ÁÉ≠Èó®Èü≥Â£∞", onNextPage);
  }
  async handleSearch(session, query) {
    if (!this.isAccessAllowed(session)) return;
    if (!query) return session.send("ËØ∑ËæìÂÖ•ÊêúÁ¥¢ÂÖ≥ÈîÆËØçÔºÅ");
    if (this.isInteractionActive(session)) return;
    const interactionKey = `${session.platform}:${session.userId}`;
    this.activeInteractions.add(interactionKey);
    const args = query.trim().split(/\s+/);
    const keyword = args[0];
    const page = args[1] && /^\d+$/.test(args[1]) ? parseInt(args[1], 10) : 1;
    const fetcher = /* @__PURE__ */ __name((p) => this.api.search(keyword, p), "fetcher");
    const onNextPage = /* @__PURE__ */ __name((nextSession, nextPage) => this.handleListInteraction(nextSession, nextPage, fetcher, keyword, onNextPage), "onNextPage");
    await this.handleListInteraction(session, page, fetcher, keyword, onNextPage);
  }
  async handleListen(session, query) {
    if (!this.isAccessAllowed(session)) return;
    if (!query) return session.send("ËØ∑ËæìÂÖ• RJ Âè∑ÔºÅ");
    if (this.isInteractionActive(session)) return;
    const args = query.trim().split(/\s+/).filter(Boolean);
    const formattedRjCode = formatRjCode(args[0]);
    if (!formattedRjCode) return session.send("ËæìÂÖ•ÁöÑRJÂè∑Ê†ºÂºè‰∏çÊ≠£Á°Æ„ÄÇ");
    const optionKeywords = ["card", "file", "zip"];
    let userOption = null;
    const potentialOption = args[args.length - 1];
    if (optionKeywords.includes(potentialOption)) {
      userOption = potentialOption;
      args.pop();
    }
    const trackIndices = args.slice(1).map((arg) => parseInt(arg, 10)).filter((num) => !isNaN(num) && num > 0);
    if (trackIndices.length > 0) {
      const rid = formattedRjCode.substring(2);
      try {
        const [workInfo, trackData] = await Promise.all([this.api.getWorkInfo(rid), this.api.getTracks(rid)]);
        if (!workInfo || !trackData) return session.send("Ëé∑ÂèñÈü≥Â£∞‰ø°ÊÅØÂ§±Ë¥•„ÄÇ");
        const allTracks = flattenTracks(trackData);
        await this.sender.processAndSendTracks(trackIndices, allTracks, workInfo, session, userOption || this.config.defaultSendMode);
      } catch (error) {
        if (this.ctx.http.isError(error) && error.response?.status === 404) {
          return session.send("Êú™ÊâæÂà∞ËØ• RJ Âè∑ÂØπÂ∫îÁöÑÈü≥Â£∞‰ø°ÊÅØ„ÄÇ");
        }
        this.logger.error(error);
        return session.send("Êü•ËØ¢Êó∂ÂèëÁîüÂÜÖÈÉ®ÈîôËØØ„ÄÇ");
      }
    } else {
      await this.handleWorkSelection(session, formattedRjCode);
    }
  }
  // -- Interaction Handlers --
  async handleWorkSelection(session, rjCode) {
    const rid = rjCode.substring(2);
    try {
      await session.send(`Ê≠£Âú®Êü•ËØ¢Èü≥Â£∞ ${rjCode} ÁöÑ‰ø°ÊÅØ...`);
      const [workInfo, trackData] = await Promise.all([this.api.getWorkInfo(rid), this.api.getTracks(rid)]);
      if (!workInfo || !trackData) return await session.send("Ëé∑ÂèñÈü≥Â£∞‰ø°ÊÅØÂ§±Ë¥•„ÄÇ");
      const allTracks = flattenTracks(trackData);
      if (allTracks.length === 0) return await session.send("Êú™Ëé∑ÂèñÂà∞‰ªª‰ΩïÊúâÊïàÈü≥ËΩ®„ÄÇ");
      await this.sendWorkInfo(session, workInfo, allTracks, rjCode);
      await session.send(`ËØ∑Âú®60ÁßíÂÜÖÂõûÂ§ç„ÄêÂ∫èÂè∑„ÄëÈÄâÊã©Èü≥ËΩ®ÔºåÊàñÂõûÂ§ç„Äên/ÂèñÊ∂à„ÄëÈÄÄÂá∫„ÄÇ
ÂèØÈôÑÂä† card | file | zip ÈÄâÈ°πÔºå‰æãÂ¶Ç "1 2 3 card"`);
      const interactionKey = `${session.platform}:${session.userId}`;
      this.activeInteractions.add(interactionKey);
      const dispose = this.ctx.middleware(async (midSession, next) => {
        if (midSession.userId !== session.userId || midSession.channelId !== session.channelId) return next();
        const choice = midSession.content.trim().toLowerCase();
        if (choice === "n" || choice === "ÂèñÊ∂à") {
          this.activeInteractions.delete(interactionKey);
          dispose();
          clearTimeout(timer);
          await midSession.send("Êìç‰ΩúÂ∑≤ÂèñÊ∂à„ÄÇ");
          return;
        }
        this.activeInteractions.delete(interactionKey);
        dispose();
        clearTimeout(timer);
        const replyArgs = choice.replace(/,/g, " ").split(/\s+/).filter(Boolean);
        let mode = null;
        if (["card", "file", "zip"].includes(replyArgs[replyArgs.length - 1])) {
          mode = replyArgs.pop();
        }
        const indices = [...new Set(replyArgs.map((s) => parseInt(s, 10)).filter((n) => !isNaN(n) && n > 0))];
        if (indices.length === 0) return await midSession.send("ËæìÂÖ•Êó†ÊïàÔºåËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈü≥ËΩ®Â∫èÂè∑„ÄÇ");
        await this.sender.processAndSendTracks(indices, allTracks, workInfo, midSession, mode || this.config.defaultSendMode);
      }, true);
      const timer = setTimeout(() => {
        this.activeInteractions.delete(interactionKey);
        dispose();
        session.send("ÈÄâÊã©Ë∂ÖÊó∂ÔºåÊìç‰ΩúÂ∑≤Ëá™Âä®ÂèñÊ∂à„ÄÇ");
      }, 6e4);
    } catch (error) {
      if (this.ctx.http.isError(error) && error.response?.status === 404) {
        await session.send("Êú™ÊâæÂà∞ËØ• RJ Âè∑ÂØπÂ∫îÁöÑÈü≥Â£∞‰ø°ÊÅØ„ÄÇ");
      } else {
        this.logger.error(error);
        await session.send("Êü•ËØ¢Êó∂ÂèëÁîüÂÜÖÈÉ®ÈîôËØØ„ÄÇ");
      }
    }
  }
  async handleListInteraction(session, page, fetcher, listTitle, onNextPage) {
    const interactionKey = `${session.platform}:${session.userId}`;
    try {
      await session.send(`Ê≠£Âú®Ëé∑Âèñ‚Äú${listTitle}‚ÄùÂàóË°®ÔºåÁ¨¨ ${page} È°µ...`);
      const data = await fetcher(page);
      if (!data?.works?.length) {
        await session.send(data?.pagination?.totalCount === 0 ? "ÂàóË°®‰∏∫Á©∫„ÄÇ" : "ÂΩìÂâçÈ°µÊó†ÁªìÊûú„ÄÇ");
        this.activeInteractions.delete(interactionKey);
        return;
      }
      if (this.config.useImageMenu && this.ctx.puppeteer) {
        const html = this.renderer.createSearchHtml(data.works, listTitle, page, data.pagination.totalCount, this.config);
        const imageBuffer = await this.renderer.renderHtmlToImage(html);
        if (imageBuffer) await session.send(import_koishi3.h.image(imageBuffer, "image/png"));
        else await this.sendSearchTextResult(session, data, page);
      } else {
        await this.sendSearchTextResult(session, data, page);
      }
      await session.send("ËØ∑Áõ¥Êé•ÂõûÂ§ç„ÄêÂ∫èÂè∑„ÄëÈÄâÊã©‰ΩúÂìÅÔºåÂõûÂ§ç„Äêf„ÄëÁøªÈ°µÔºåÊàñÂõûÂ§ç„Äên/ÂèñÊ∂à„ÄëÈÄÄÂá∫„ÄÇ");
      const dispose = this.ctx.middleware(async (midSession, next) => {
        if (midSession.userId !== session.userId || midSession.channelId !== session.channelId) return next();
        const content = midSession.content.trim().toLowerCase();
        if (content === "f") {
          dispose();
          clearTimeout(timer);
          await onNextPage(midSession, page + 1);
          return;
        }
        if (content === "n" || content === "ÂèñÊ∂à") {
          this.activeInteractions.delete(interactionKey);
          dispose();
          clearTimeout(timer);
          await midSession.send("Êìç‰ΩúÂ∑≤ÂèñÊ∂à„ÄÇ");
          return;
        }
        const choice = parseInt(content, 10);
        const localIndex = choice - (page - 1) * this.config.pageSize;
        if (isNaN(choice) || localIndex < 1 || localIndex > data.works.length) return next();
        this.activeInteractions.delete(interactionKey);
        dispose();
        clearTimeout(timer);
        const selectedWork = data.works[localIndex - 1];
        await this.handleWorkSelection(midSession, `RJ${String(selectedWork.id).padStart(8, "0")}`);
      }, true);
      const timer = setTimeout(() => {
        this.activeInteractions.delete(interactionKey);
        dispose();
        session.send("ÈÄâÊã©Ë∂ÖÊó∂ÔºåÊìç‰ΩúÂ∑≤Ëá™Âä®ÂèñÊ∂à„ÄÇ");
      }, 6e4);
    } catch (error) {
      this.logger.error("Ëé∑ÂèñÂàóË°®Êó∂ÂèëÁîüÂÜÖÈÉ®ÈîôËØØ: %o", error);
      await session.send("Ëé∑ÂèñÂàóË°®Êó∂ÂèëÁîüÂÜÖÈÉ®ÈîôËØØ„ÄÇ");
      this.activeInteractions.delete(interactionKey);
    }
  }
  async sendWorkInfo(session, workInfo, allTracks, rjCode) {
    if (this.config.useImageMenu && this.ctx.puppeteer) {
      let linksHtml = "";
      if (this.config.showLinks) {
        const asmrOneUrl = `https://asmr.one/work/${rjCode}`;
        linksHtml = `<div class="links"><span><strong>ASMR.one:</strong> <a href="${asmrOneUrl}">${import_koishi3.h.escape(asmrOneUrl)}</a></span>${workInfo.source_url ? `<span><strong>DLsite:</strong> <a href="${workInfo.source_url}">${import_koishi3.h.escape(workInfo.source_url)}</a></span>` : ""}</div>`;
      }
      const html = this.renderer.createWorkInfoHtml(workInfo, allTracks, linksHtml);
      const imageBuffer = await this.renderer.renderHtmlToImage(html);
      if (imageBuffer) return await session.send(import_koishi3.h.image(imageBuffer, "image/png"));
    }
    await this.sendWorkInfoAsText(session, workInfo, allTracks, rjCode);
  }
  async sendWorkInfoAsText(session, workInfo, allTracks, rjCode) {
    const infoBlockArray = [
      `„Äê${rjCode}„Äë`,
      `Ê†áÈ¢ò: ${import_koishi3.h.escape(workInfo.title)}`,
      `Á§æÂõ¢: üè¢ ${import_koishi3.h.escape(workInfo.name)}`,
      `Êó•Êúü: üìÖ ${workInfo.release}`,
      `ËØÑÂàÜ: ‚≠êÔ∏è ${workInfo.rate_average_2dp} (${workInfo.rate_count}‰∫∫)`,
      `ÈîÄÈáè: üì• ${workInfo.dl_count}`,
      `Êó∂Èïø: ‚è±Ô∏è ${formatWorkDuration(workInfo.duration)}`,
      `Â£∞‰ºò: üé§ ${import_koishi3.h.escape(workInfo.vas.map((v) => v.name).join(", "))}`,
      `Ê†áÁ≠æ: üè∑Ô∏è ${import_koishi3.h.escape(workInfo.tags.map((t) => t.name).join(", "))}`
    ];
    if (this.config.showLinks) {
      infoBlockArray.push(`asmr.oneÈìæÊé•: https://asmr.one/work/${rjCode}`);
      if (workInfo.source_url) infoBlockArray.push(`DLsiteÈìæÊé•: ${workInfo.source_url}`);
    }
    const infoBlock = infoBlockArray.join("\n");
    const trackListText = `--- Èü≥ËΩ®ÂàóË°® ---
` + allTracks.map((t, i) => `${i + 1}. ${import_koishi3.h.escape(t.title)}`).join("\n");
    if (this.config.useForward && session.platform === "onebot") {
      const imageUri = await this.api.downloadImageAsDataUri(workInfo.mainCoverUrl);
      const imageElement = imageUri ? import_koishi3.h.image(imageUri) : (0, import_koishi3.h)("p", "Â∞ÅÈù¢Âä†ËΩΩÂ§±Ë¥•");
      await session.send((0, import_koishi3.h)("figure", [
        (0, import_koishi3.h)("message", { nickname: "‰ΩúÂìÅËØ¶ÊÉÖ" }, [imageElement, "\n" + infoBlock]),
        (0, import_koishi3.h)("message", { nickname: "Èü≥ËΩ®ÂàóË°®" }, trackListText)
      ]));
    } else {
      await session.send([import_koishi3.h.image(workInfo.mainCoverUrl), infoBlock, trackListText].join("\n\n"));
    }
  }
  async sendSearchTextResult(session, data, page) {
    const header = `‰∏∫‰Ω†ÊâæÂà∞ ${data.pagination.totalCount} ‰∏™ÁªìÊûú (Á¨¨ ${page} È°µ):`;
    const buildEntryText = /* @__PURE__ */ __name((work, index) => {
      const rjCode = `RJ${String(work.id).padStart(8, "0")}`;
      const tags = work.tags.slice(0, 5).map((t) => t.name).join(", ");
      return [
        `${(page - 1) * this.config.pageSize + index + 1}. „Äê${rjCode}„Äë`,
        `   Ê†áÈ¢ò: ${import_koishi3.h.escape(work.title)}`,
        `   Á§æÂõ¢: üè¢ ${import_koishi3.h.escape(work.name)}`,
        `   Êó•Êúü: üìÖ ${work.release}`,
        `   Â£∞‰ºò: üé§ ${import_koishi3.h.escape(work.vas.map((v) => v.name).join(", ") || "Êú™Áü•")}`,
        `   ËØÑÂàÜ: ‚≠êÔ∏è ${work.rate_average_2dp} (${work.rate_count})`,
        `   ÈîÄÈáè: üì• ${work.dl_count}`,
        `   Êó∂Èïø: ‚è±Ô∏è ${formatWorkDuration(work.duration)}`,
        `   Ê†áÁ≠æ: üè∑Ô∏è ${import_koishi3.h.escape(tags)}`
      ].join("\n");
    }, "buildEntryText");
    if (this.config.useForward && session.platform === "onebot") {
      const messageNodes = [(0, import_koishi3.h)("message", { nickname: session.bot.user?.name || session.bot.selfId }, header)];
      for (const [index, work] of data.works.entries()) {
        const entryText = buildEntryText(work, index);
        let content = [entryText];
        if (this.config.showSearchImage) {
          const imageUri = await this.api.downloadImageAsDataUri(work.mainCoverUrl);
          content = imageUri ? [import_koishi3.h.image(imageUri), "\n", entryText] : ["[Â∞ÅÈù¢Âä†ËΩΩÂ§±Ë¥•]\n", entryText];
        }
        messageNodes.push((0, import_koishi3.h)("message", { nickname: `ÁªìÊûú ${(page - 1) * this.config.pageSize + index + 1}` }, content));
      }
      await session.send((0, import_koishi3.h)("figure", messageNodes));
    } else {
      const messageElements = [header];
      for (const [index, work] of data.works.entries()) {
        messageElements.push("\n" + "‚îÄ".repeat(15) + "\n");
        if (this.config.showSearchImage) messageElements.push((0, import_koishi3.h)("image", { src: work.mainCoverUrl }));
        messageElements.push(buildEntryText(work, index));
      }
      await session.send(messageElements);
    }
  }
};

// src/config.ts
var import_koishi4 = require("koishi");
var Config = import_koishi4.Schema.intersect([
  import_koishi4.Schema.object({
    apiBaseUrl: import_koishi4.Schema.string().default("https://api.asmr-200.com/api").description("Ëé∑ÂèñÈü≥Â£∞Êï∞ÊçÆÁöÑ API Âú∞ÂùÄ„ÄÇ\nÂèØÈÄâÂÄºÂèÇËÄÉ:\n- `asmr-300.com` (ÈöèÁºòÂ¢ô)\n- `asmr-200.com` (ÈöèÁºòÂ¢ô)\n- `asmr-100.com` (ÂõΩÂÜÖÂ¢ô)\n- `asmr.one` (ÂõΩÂÜÖÂ¢ô)\nËØ∑ÊõøÊç¢ÂüüÂêçÈÉ®ÂàÜ, Â¶Ç: `https://api.asmr.one/api`"),
    useForward: import_koishi4.Schema.boolean().default(false).description("„ÄêÈùûÂõæÁâáËèúÂçïÊ®°Âºè‰∏ã„Äë‰ΩøÁî®ÂêàÂπ∂ËΩ¨ÂèëÂèëÈÄÅÈïøÊ∂àÊÅØ„ÄÇ"),
    showSearchImage: import_koishi4.Schema.boolean().default(false).description("„ÄêÈùûÂõæÁâáËèúÂçïÊ®°Âºè‰∏ã„ÄëÂú®ÊêúÁ¥¢ÁªìÊûú‰∏≠ÊòæÁ§∫Â∞ÅÈù¢Âõæ„ÄÇ\nÊ≥®ÊÑèÔºöÂèØËÉΩÂ¢ûÂä†Âπ≥Âè∞È£éÊéßÈ£éÈô©„ÄÇ"),
    useImageMenu: import_koishi4.Schema.boolean().default(true).description("‰ΩøÁî®ÂõæÁâáËèúÂçïÊ®°ÂºèÂèëÈÄÅÁªìÊûú„ÄÇ\nÈúÄË¶Å `koishi-plugin-puppeteer`„ÄÇ"),
    showLinks: import_koishi4.Schema.boolean().default(false).description("Âú®‰ΩúÂìÅËØ¶ÊÉÖ‰∏≠ËøîÂõû asmr.one Âíå DLsite ÁöÑÈìæÊé•„ÄÇ"),
    pageSize: import_koishi4.Schema.number().min(1).max(40).default(10).description("ÊØèÈ°µÂ±ïÁ§∫ÁöÑÁªìÊûúÊï∞Èáè (ËåÉÂõ¥ 1-40)„ÄÇ")
  }).description("Âü∫Á°ÄËÆæÁΩÆ"),
  import_koishi4.Schema.object({
    accessMode: import_koishi4.Schema.union([
      import_koishi4.Schema.const("all").description("ÊâÄÊúâÁæ§ËÅäÂùáÂèØ‰ΩøÁî®"),
      import_koishi4.Schema.const("whitelist").description("ÁôΩÂêçÂçïÊ®°Âºè"),
      import_koishi4.Schema.const("blacklist").description("ÈªëÂêçÂçïÊ®°Âºè")
    ]).default("all").description("ËÆøÈóÆÊùÉÈôêÊ®°Âºè"),
    whitelist: import_koishi4.Schema.array(import_koishi4.Schema.string()).default([]).description("ÁôΩÂêçÂçïÂàóË°® (Áæ§Âè∑ÊàñÈ¢ëÈÅì ID)„ÄÇ\n‰ªÖÂú®ÁôΩÂêçÂçïÊ®°Âºè‰∏ãÁîüÊïà„ÄÇ"),
    blacklist: import_koishi4.Schema.array(import_koishi4.Schema.string()).default([]).description("ÈªëÂêçÂçïÂàóË°® (Áæ§Âè∑ÊàñÈ¢ëÈÅì ID)„ÄÇ\n‰ªÖÂú®ÈªëÂêçÂçïÊ®°Âºè‰∏ãÁîüÊïà„ÄÇ")
  }).description("ÊùÉÈôêËÆæÁΩÆ"),
  import_koishi4.Schema.object({
    defaultSendMode: import_koishi4.Schema.union([
      import_koishi4.Schema.const("card").description("Èü≥‰πêÂç°Áâá (card)"),
      import_koishi4.Schema.const("file").description("Èü≥È¢ëÊñá‰ª∂ (file)"),
      import_koishi4.Schema.const("zip").description("ÂéãÁº©ÂåÖ (zip)")
    ]).default("file").description("`Âê¨Èü≥Â£∞` Êåá‰ª§ÁöÑÈªòËÆ§ÂèëÈÄÅÊñπÂºè„ÄÇ"),
    downloadTimeout: import_koishi4.Schema.number().default(300).description("Âçï‰∏™Èü≥ËΩ®‰∏ãËΩΩÁöÑË∂ÖÊó∂Êó∂Èó¥ (Áßí)„ÄÇ")
  }).description("‰∏ãËΩΩ‰∏éÂèëÈÄÅËÆæÁΩÆ"),
  import_koishi4.Schema.object({
    zipMode: import_koishi4.Schema.union([
      import_koishi4.Schema.const("single").description("ÂêàÂπ∂‰∏∫‰∏ÄÂåÖ"),
      import_koishi4.Schema.const("multiple").description("ÊØèËΩ®‰∏ÄÂåÖ")
    ]).default("single").description("Â§öÈü≥ËΩ®ÂéãÁº©ÊñπÂºè„ÄÇ\nÂØπÊâÄÊúâ `zip` Ê®°ÂºèÁöÑÂèëÈÄÅÁîüÊïà„ÄÇ"),
    usePassword: import_koishi4.Schema.boolean().default(false).description("ÊòØÂê¶‰∏∫ÂéãÁº©ÂåÖÊ∑ªÂä†ÂØÜÁ†Å„ÄÇ")
  }).description("ÂéãÁº©ÂåÖËÆæÁΩÆ"),
  import_koishi4.Schema.union([
    import_koishi4.Schema.object({
      usePassword: import_koishi4.Schema.const(true).required(),
      password: import_koishi4.Schema.string().role("secret").default("").description("ÂéãÁº©ÂåÖÂØÜÁ†Å„ÄÇ")
    }),
    import_koishi4.Schema.object({})
  ])
]);

// src/index.ts
if (!import_archiver2.default.isRegisteredFormat("zip-encrypted")) {
  import_archiver2.default.registerFormat("zip-encrypted", require("archiver-zip-encrypted"));
}
var name = "asmrone";
var inject = ["http", "puppeteer"];
var usage = `
Ê≥®ÊÑèÔºöÈÉ®ÂàÜÂÜÖÂÆπÂèØËÉΩ‰∏çÈÄÇÂêàÂú®ÊâÄÊúâÂú∫Âêà‰ΩøÁî® (NSFW)ÔºåËØ∑Âú®ÂêàÈÄÇÁöÑËåÉÂõ¥ÂÜÖ‰ΩøÁî®Êú¨Êèí‰ª∂„ÄÇ

---

### ÊêúÈü≥Â£∞ <ÂÖ≥ÈîÆËØç> [È°µÊï∞]
ÊêúÁ¥¢Èü≥Â£∞‰ΩúÂìÅ
- **ÂÖ≥ÈîÆËØç**: ÂøÖÈúÄ„ÄÇ Â§ö‰∏™Ê†áÁ≠æËØ∑Áî® / ÂàÜÂâ≤„ÄÇ
- **È°µÊï∞**: ÂèØÈÄâ„ÄÇ ÁªìÊûúÁöÑÈ°µÁ†Å„ÄÇ
- **Á§∫‰æã**: \`ÊêúÈü≥Â£∞ ÂÇ¨Áú†/JK 2\`

### ÁÉ≠Èó®Èü≥Â£∞ [È°µÊï∞]
Ëé∑ÂèñÂΩìÂâçÁÉ≠Èó®‰ΩúÂìÅÂàóË°®
- **È°µÊï∞**: ÂèØÈÄâ„ÄÇ ÁªìÊûúÁöÑÈ°µÁ†Å„ÄÇ
- **Á§∫‰æã**: \`ÁÉ≠Èó®Èü≥Â£∞ 2\`

### Âê¨Èü≥Â£∞ <RJÂè∑> [Èü≥ËΩ®Â∫èÂè∑...] [ÈÄâÈ°π]
Ëé∑Âèñ‰ΩúÂìÅ‰ø°ÊÅØÂπ∂ÂèëÈÄÅÈü≥ËΩ®
- **RJÂè∑**: ÂøÖÈúÄ„ÄÇ ‰ΩúÂìÅID, Â¶Ç \`RJ01234567\` Êàñ \`123456\`„ÄÇ
- **Èü≥ËΩ®Â∫èÂè∑**: ÂèØÈÄâ„ÄÇ ‰∏Ä‰∏™ÊàñÂ§ö‰∏™Èü≥ËΩ®ÁöÑÊï∞Â≠óÂ∫èÂè∑, Áî®Á©∫Ê†ºÂàÜÈöî„ÄÇ
- **ÈÄâÈ°π**: ÂèØÈÄâ„ÄÇ ÂèëÈÄÅÊñπÂºè \`card\` | \`file\` | \`zip\`„ÄÇËã•ÁúÅÁï•Âàô‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ„ÄÇ

**‰ΩøÁî®ÊñπÂºè:**
1. Ëé∑ÂèñËØ¶ÊÉÖ (Á≠âÂæÖ‰∫§‰∫í): \`Âê¨Èü≥Â£∞ RJ01234567\`
2. Áõ¥Êé•Ëé∑ÂèñÊåáÂÆöÈü≥ËΩ®Âπ∂ÂèëÈÄÅÂéãÁº©ÂåÖ: \`Âê¨Èü≥Â£∞ RJ01234567 1 3 5 zip\`

**‰∫§‰∫íËØ¥Êòé:**
- Âú®ÂàóË°®Êåá‰ª§Âêé, ÂèØÂõûÂ§ç„ÄêÂ∫èÂè∑„ÄëÈÄâÊã©, ÂõûÂ§ç„Äêf„ÄëÁøªÈ°µ„ÄÇ
- ÊâÄÊúâ‰∫§‰∫íÂùáÂèØÈÄöËøáÂõûÂ§ç„Äên/ÂèñÊ∂à„ÄëÊù•‰∏≠Êñ≠„ÄÇ

---

**Ê≥®ÊÑè:**
- ÂèëÈÄÅÂõæÁâáÊàñÊñá‰ª∂Â§±Ë¥•ÈÄöÂ∏∏Áî±Âπ≥Âè∞È£éÊéßÂØºËá¥„ÄÇ
- Èü≥‰πêÂç°Áâá(card)Ê®°ÂºèÂèØËÉΩÈúÄË¶ÅÁ≠æÂêçÊúçÂä°, ‰∏î‰ªÖÂú®ÈÉ®ÂàÜÈÄÇÈÖçÂô® (Â¶Ç OneBot) ‰∏äÂèØÁî®„ÄÇ
`;
function apply(ctx, config) {
  const logger = ctx.logger("asmrone");
  const tempDir = (0, import_path2.resolve)(ctx.baseDir, "temp", "asmrone");
  const api = new AsmrApi(ctx, config);
  const renderer = new Renderer(ctx);
  const sender = new TrackSender(ctx, config, tempDir);
  const commandHandler = new CommandHandler(ctx, config, api, renderer, sender);
  ctx.on("ready", async () => {
    try {
      await import_fs2.promises.mkdir(tempDir, { recursive: true });
      logger.info("‰∏¥Êó∂Êñá‰ª∂ÁõÆÂΩïÂ∑≤ÂàõÂª∫: %s", tempDir);
    } catch (error) {
      logger.error("ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂ÁõÆÂΩïÂ§±Ë¥•: %o", error);
    }
    if (config.useImageMenu && !ctx.puppeteer) {
      logger.warn("ÂõæÁâáËèúÂçïÂäüËÉΩÂ∑≤ÂºÄÂêØÔºå‰ΩÜÊú™ÊâæÂà∞ puppeteer ÊúçÂä°„ÄÇËØ∑ÂÆâË£Ö koishi-plugin-puppeteer Âπ∂ÈáçÂêØ„ÄÇ");
    }
  });
  ctx.command("ÁÉ≠Èó®Èü≥Â£∞ [page:number]", "Ëé∑ÂèñÂΩìÂâçÁÉ≠Èó®Èü≥Â£∞ÂàóË°®").action(async ({ session }, page) => commandHandler.handlePopular(session, page));
  ctx.command("ÊêúÈü≥Â£∞ <query:text>", "ÊêúÁ¥¢Èü≥Â£∞‰ΩúÂìÅ").action(async ({ session }, query) => commandHandler.handleSearch(session, query));
  ctx.command("Âê¨Èü≥Â£∞ <query:text>", "Ëé∑ÂèñÂπ∂Êî∂Âê¨Èü≥Â£∞").action(async ({ session }, query) => commandHandler.handleListen(session, query));
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  inject,
  name,
  usage
});
